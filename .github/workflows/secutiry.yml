name: On-demand Security Scan (Grype + Trivy)
run-name: "Security Scan [${{ github.event.inputs.target }}, only HIGH+CRITICAL: ${{ github.event.inputs.filter_strict }}] by @${{ github.actor }} #${{ github.run_number }}"
on:
  workflow_dispatch:
    inputs:
      target:
        description: "Scan part"
        required: true
        default: "docker"
        type: choice
        options:
          - docker
          - source
      image:
        description: "Docker image (for docker/both). By default ghcr.io/<owner>/<repo>:latest"
        required: false
        default: ""
      filter_strict:
        description: "Filter SARIF to only HIGH+CRITICAL"
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write

env:
  GRYPE_SEVERITY: "CRITICAL"
  TRIVY_SEVERITY: "CRITICAL,HIGH"

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.vars.outputs.image }}
      grype-file-name: ${{ steps.vars.outputs.grype_file_name }}
      trivy-file-name: ${{ steps.vars.outputs.trivy_file_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define variables
        id: vars
        run: |
          if [ -n "${{ github.event.inputs.image }}" ]; then
            echo "image=${{ github.event.inputs.image }}" >> $GITHUB_OUTPUT
          else
            echo "image=ghcr.io/${{ github.repository }}:latest" >> $GITHUB_OUTPUT
          fi
          echo "grype_file_name=${{ github.event.inputs.target == 'docker' && 'grype-docker' || 'grype-source' }}" >> $GITHUB_OUTPUT
          echo "trivy_file_name=${{ github.event.inputs.target == 'docker' && 'trivy-docker' || 'trivy-source' }}" >> $GITHUB_OUTPUT

      - name: Scan plan
        run: |
          echo "Mode: ${{ github.event.inputs.target }}"
          echo "Image (if docker/both): ${{ steps.vars.outputs.image }}"
          echo "Filter strict: ${{ github.event.inputs.filter_strict }}"
          if [ "${{ github.event.inputs.target }}" = "docker" ]; then
            echo "   - Docker scan: enabled"
          else
            echo "   - Docker scan: skipped"
          fi
          if [ "${{ github.event.inputs.target }}" = "source" ]]; then
            echo "   - Source scan: enabled"
          else
            echo "   - Source scan: skipped"
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

  grype-scan:
    runs-on: ubuntu-latest
    needs: [init]
    outputs:
      grype_docker_conclusion: ${{ steps.grype-docker.conclusion }}
      grype_source_conclusion: ${{ steps.grype-source.conclusion }}

    steps:
      # Grype Docker
      - name: "Grype scan (Docker: High+Critical)"
        if: ${{ inputs.target == 'docker'}}
        id: grype-docker
        uses: anchore/scan-action@v7
        with:
          image: "${{ needs.init.outputs.image }}"
          output-file: ${{ needs.init.outputs.grype-file-name }}.sarif
          fail-build: false
          severity-cutoff: critical

      # Grype Source
      - name: "Grype scan (Source: High+Critical)"
        if: ${{ inputs.target == 'source'}}
        id: grype-source
        uses: anchore/scan-action@v7
        with:
          path: .
          output-file: ${{ needs.init.outputs.grype-file-name }}.sarif
          fail-build: false
          severity-cutoff: critical
        continue-on-error: true

      - name: Filter Grype Source SARIF
        if: ${{ inputs.filter_strict }}
        run: |
          SARIF_FILE=${{ needs.init.outputs.grype-file-name }}.sarif
          jq '.runs[].results |= map(select(.level=="error" or .level=="warning"))' "$SARIF_FILE" > "${SARIF_FILE%.sarif}.filtered.sarif"
          mv "${SARIF_FILE%.sarif}.filtered.sarif" "$SARIF_FILE"

      - name: Upload Grype Source SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ needs.init.outputs.grype-file-name }}.sarif

  trivy-scan:
    runs-on: ubuntu-latest
    needs: [init]
    outputs:
      trivy_docker_conclusion: ${{ steps.trivy-docker.conclusion }}
      trivy_source_conclusion: ${{ steps.trivy-source.conclusion }}

    steps:
      # Trivy Docker
      - name: "Trivy scan (Docker: ${{ env.TRIVY_SEVERITY }})"
        if: ${{ github.event.inputs.target == 'docker' }}
        id: trivy-docker
        uses: aquasecurity/trivy-action@0.33.0
        with:
          image-ref: "${{ needs.init.outputs.image }}"
          severity: ${{ env.TRIVY_SEVERITY }}
          output: ${{ needs.init.outputs.trivy-file-name }}.sarif
          format: 'sarif'
        continue-on-error: true

      # Trivy Source
      - name: "Trivy scan (Source: ${{ env.TRIVY_SEVERITY }})"
        if: ${{ github.event.inputs.target == 'source' }}
        id: trivy-source
        uses: aquasecurity/trivy-action@0.33.0
        with:
          scan-type: "fs"
          severity: ${{ env.TRIVY_SEVERITY }}
          output: ${{ needs.init.outputs.trivy-file-name }}.sarif
          format: 'sarif'
        continue-on-error: true

      - name: Filter Trivy Docker SARIF
        if: ${{ github.event.inputs.filter_strict }}
        run: |
          SARIF_FILE=${{ needs.init.outputs.trivy-file-name }}.sarif
          jq '.runs[].results |= map(select(.level=="error" or .level=="warning"))' "$SARIF_FILE" > "${SARIF_FILE%.sarif}.filtered.sarif"
          mv "${SARIF_FILE%.sarif}.filtered.sarif" "$SARIF_FILE"

      - name: Upload Trivy Docker SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ needs.init.outputs.trivy-file-name }}.sarif



  collect-reports:
    runs-on: ubuntu-latest
    needs: [grype-scan, trivy-scan]
    steps:
      - name: Upload all scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-reports-${{ github.event.inputs.target }}
          path: "**/*.sarif"
          if-no-files-found: ignore

      # - name: Fail if vulnerabilities were found
      #   if: always()
      #   run: |
      #     echo "Checking scan results..."
      #       FAILED=false
      #       if [[ "${{ needs.grype-scan.outputs.grype_docker_conclusion }}" == "failure" ]]; then FAILED=true; fi
      #       if [[ "${{ needs.grype-scan.outputs.grype_source_conclusion }}" == "failure" ]]; then FAILED=true; fi
      #       if [[ "${{ needs.trivy-scan.outputs.trivy_docker_conclusion }}" == "failure" ]]; then FAILED=true; fi
      #       if [[ "${{ needs.trivy-scan.outputs.trivy_source_conclusion }}" == "failure" ]]; then FAILED=true; fi

      #       if [ "$FAILED" = "true" ]; then
      #         echo "❌ Vulnerabilities found!"
      #         exit 1
      #       else
      #         echo "✅ No blocking vulnerabilities found."
      #       fi
      #     if [ "$FAILED" = "true" ]; then
      #       echo "❌ Vulnerabilities found!"
      #       exit 1
      #     else
      #       echo "✅ No blocking vulnerabilities found."
      #     fi
