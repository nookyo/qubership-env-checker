name: On-demand Security Scan (Grype + Trivy)

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Scan part"
        required: true
        default: "docker"
        type: choice
        options:
          - docker
          - source
          - both
      image:
        description: "Docker image (for docker/both). By default ghcr.io/<owner>/<repo>:latest"
        required: false
        default: ""

permissions:
  contents: read
  security-events: write

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define image name
        id: vars
        run: |
          if [ -n "${{ github.event.inputs.image }}" ]; then
            echo "image=${{ github.event.inputs.image }}" >> $GITHUB_OUTPUT
          else
            echo "image=ghcr.io/${{ github.repository }}:latest" >> $GITHUB_OUTPUT
          fi

      - name: Show plan
        run: |
          echo "Mode: ${{ github.event.inputs.target }}"
          echo "Image (if docker/both): ${{ steps.vars.outputs.image }}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Grype scan (High+Critical, JSON)
        uses: anchore/scan-action@v6
        with:
          image: "${{ steps.vars.outputs.image }}"
          fail-build: false
          severity-cutoff: critical
          output-format: json
          output-file: grype-docker.json

      - name: Upload scan artifact
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-docker.json
          if-no-files-found: error
      # # Grype
      # - name: "Grype scan (Docker: High+Critical)"
      #   if: ${{ github.event.inputs.target == 'docker' || github.event.inputs.target == 'both' }}
      #   id: grype-docker
      #   uses: anchore/scan-action@v6
      #   with:
      #     image: "${{ steps.vars.outputs.image }}"
      #     fail-build: false
      #     severity-cutoff: high
      #     output-file: "grype-docker.sarif"

      # - name: Upload SARIF report to GitHub Security
      #   if: ${{ github.event.inputs.target == 'docker' || github.event.inputs.target == 'both' }}
      #   id: scan
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: ${{ steps.grype-docker.outputs.sarif }}

#    - name: Scan image with Anchore/Grype
#         uses: anchore/scan-action@v3
#         with:
#           image: "ghcr.io/netcracker/${{ matrix.component.name }}:${{ steps.tag.outputs.tag }}"
#           fail-build: true
#           severity-cutoff: critical, high, medium
#           output-format: sarif

#       - name: Upload SARIF report to GitHub Security
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: results.sarif


    #   - name: "Grype scan (Source: High+Critical)"
    #     if: ${{ github.event.inputs.target == 'source' || github.event.inputs.target == 'both' }}
    #     id: grype-source
    #     uses: anchore/scan-action@v7
    #     with:
    #       path: .
    #       fail-build: false
    #       severity-cutoff: high
    #       output-format: sarif
    #       output-file: "grype-source.sarif"
    #     continue-on-error: true

    #   # Trivy
    #   - name: "Trivy scan (Docker: CRITICAL,HIGH)"
    #     if: ${{ github.event.inputs.target == 'docker' || github.event.inputs.target == 'both' }}
    #     id: trivy-docker
    #     uses: aquasecurity/trivy-action@0.16.0
    #     with:
    #       image-ref: "${{ steps.vars.outputs.image }}"
    #       format: "sarif"
    #       output: "trivy-docker.sarif"
    #       severity: "CRITICAL,HIGH"
    #       exit-code: "0"
    #     continue-on-error: true

    #   - name: "Trivy scan (Source: CRITICAL,HIGH)"
    #     if: ${{ github.event.inputs.target == 'source' || github.event.inputs.target == 'both' }}
    #     id: trivy-source
    #     uses: aquasecurity/trivy-action@0.16.0
    #     with:
    #       ignore-unfixed: true
    #       scan-type: "fs"
    #       format: "sarif"
    #       output: "trivy-source.sarif"
    #       severity: "CRITICAL,HIGH"
    #       exit-code: "0"
    #     continue-on-error: true

      # - name: Upload SARIF results
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: results.sarif

      # - name: Upload scan artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: scan-reports-${{ github.event.inputs.target }}
      #     path: |
      #       grype-docker.sarif
      #       grype-source.sarif
      #       trivy-docker.sarif
      #       trivy-source.sarif
      #     if-no-files-found: ignore

      # Fail only at the end if issues found
    #   - name: Fail if vulnerabilities were found
    #     if: always()
    #     run: |
    #       echo "Checking scan results..."
    #       FAILED=false
    #       if [[ "${{ steps.grype-docker.outcome }}" == "failure" ]]; then FAILED=true; fi
    #       if [[ "${{ steps.grype-source.outcome }}" == "failure" ]]; then FAILED=true; fi
    #       if [[ "${{ steps.trivy-docker.outcome }}" == "failure" ]]; then FAILED=true; fi
    #       if [[ "${{ steps.trivy-source.outcome }}" == "failure" ]]; then FAILED=true; fi
    #       if [ "$FAILED" = "true" ]; then
    #         echo "❌ Vulnerabilities found!"
    #         exit 1
    #       else
    #         echo "✅ No blocking vulnerabilities found."
    #       fi
