name: On-demand Security Scan (Grype + Trivy)
run-name: "Security Scan [${{ github.event.inputs.target }}] by @${{ github.actor }} #${{ github.run_number }}"
on:
  workflow_dispatch:
    inputs:
      target:
        description: "Scan part"
        required: true
        default: "docker"
        type: choice
        options: [docker, source]
      image:
        description: "Docker image (for docker). Defaults to ghcr.io/<owner>/<repo>:latest"
        required: false
        default: ""
      filter_strict:
        description: "Filter SARIF to only HIGH+CRITICAL"
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.vars.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - id: vars
        run: |
          if [ -n "${{ github.event.inputs.image }}" ]; then
            echo "image=${{ github.event.inputs.image }}" >> $GITHUB_OUTPUT
          else
            echo "image=ghcr.io/${{ github.repository }}:latest" >> $GITHUB_OUTPUT
          fi

      - run: |
          echo "Mode: ${{ github.event.inputs.target }}"
          echo "Image: ${{ steps.vars.outputs.image }}"
          echo "Filter strict: ${{ github.event.inputs.filter_strict }}"

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

  scans:
    runs-on: ubuntu-latest
    needs: init
    steps:
      # Grype Docker
      - name: Grype scan (Docker)
        if: ${{ github.event.inputs.target == 'docker' }}
        uses: anchore/scan-action@v7
        with:
          image: "${{ needs.init.outputs.image }}"
          fail-build: false
          severity-cutoff: high
          output-format: sarif
          output-file: grype-docker.sarif

      # Grype Source
      - name: Grype scan (Source)
        if: ${{ github.event.inputs.target == 'source' }}
        uses: anchore/scan-action@v7
        with:
          path: .
          fail-build: false
          severity-cutoff: critical
          output-format: sarif
          output-file: grype-source.sarif
        continue-on-error: true

      # Trivy Docker
      - name: Trivy scan (Docker)
        if: ${{ github.event.inputs.target == 'docker' }}
        uses: aquasecurity/trivy-action@0.16.0
        with:
          image-ref: "${{ needs.init.outputs.image }}"
          format: sarif
          output: trivy-docker.sarif
          severity: CRITICAL,HIGH
          exit-code: "0"
        continue-on-error: true

      # Trivy Source
      - name: Trivy scan (Source)
        if: ${{ github.event.inputs.target == 'source' }}
        uses: aquasecurity/trivy-action@0.16.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: trivy-source.sarif
          severity: CRITICAL,HIGH
          exit-code: "0"
        continue-on-error: true

      - name: Filter SARIFs
        if: ${{ github.event.inputs.filter_strict == 'true' }}
        run: |
          for f in *.sarif; do
            echo "Filtering $f"
            jq '.runs[].results |= map(select(.level=="error" or .level=="warning"))' "$f" > tmp.sarif
            mv tmp.sarif "$f"
          done

      - name: Upload SARIFs
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "*.sarif"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-reports-${{ github.event.inputs.target }}
          path: "*.sarif"
          if-no-files-found: ignore
