name: On-demand Security Scan (Grype + Trivy)
run-name: "Security Scan [${{ github.event.inputs.target }}] by @${{ github.actor }} #${{ github.run_number }}"

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Scan part"
        required: true
        default: "docker"
        type: choice
        options:
          - docker
          - source
          - both
      image:
        description: "Docker image (for docker/both). By default ghcr.io/<owner>/<repo>:latest"
        required: false
        default: ""
      filter_strict:
        description: "Filter SARIF to only HIGH+CRITICAL"
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define image name
        id: vars
        run: |
          if [ -n "${{ github.event.inputs.image }}" ]; then
            echo "image=${{ github.event.inputs.image }}" >> $GITHUB_OUTPUT
          else
            echo "image=ghcr.io/${{ github.repository }}:latest" >> $GITHUB_OUTPUT
          fi

      - name: Scan plan
        run: |
          echo "Mode: ${{ github.event.inputs.target }}"
          echo "Image (if docker/both): ${{ steps.vars.outputs.image }}"
          echo "Filter strict: ${{ github.event.inputs.filter_strict }}"
          if [ "${{ github.event.inputs.target }}" = "docker" ] || [ "${{ github.event.inputs.target }}" = "both" ]; then
            echo "   - Docker scan: enabled"
          else
            echo "   - Docker scan: skipped"
          fi
          if [ "${{ github.event.inputs.target }}" = "source" ] || [ "${{ github.event.inputs.target }}" = "both" ]; then
            echo "   - Source scan: enabled"
          else
            echo "   - Source scan: skipped"
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # -----------------------------
      # Grype Docker
      - name: "Grype scan (Docker: High+Critical)"
        if: ${{ github.event.inputs.target == 'docker' || github.event.inputs.target == 'both' }}
        id: grype-docker
        uses: anchore/scan-action@v7
        with:
          image: "${{ steps.vars.outputs.image }}"
          fail-build: false
          severity-cutoff: high
          output-format: sarif
          output-file: grype-docker.sarif

      - name: Filter Grype Docker SARIF
        if: ${{ (github.event.inputs.target == 'docker' || github.event.inputs.target == 'both') && github.event.inputs.filter_strict }}
        run: |
          jq '.runs[].results |= map(select(.level=="error" or .level=="warning"))' grype-docker.sarif > grype-docker.filtered.sarif
          mv grype-docker.filtered.sarif grype-docker.sarif

      # -----------------------------
      # Grype Source
      - name: "Grype scan (Source: High+Critical)"
        if: ${{ github.event.inputs.target == 'source' || github.event.inputs.target == 'both' }}
        id: grype-source
        uses: anchore/scan-action@v7
        with:
          path: .
          fail-build: false
          severity-cutoff: high
          output-format: sarif
          output-file: grype-source.sarif
        continue-on-error: true

      - name: Filter Grype Source SARIF
        if: ${{ (github.event.inputs.target == 'source' || github.event.inputs.target == 'both') && github.event.inputs.filter_strict }}
        run: |
          jq '.runs[].results |= map(select(.level=="error" or .level=="warning"))' grype-source.sarif > grype-source.filtered.sarif
          mv grype-source.filtered.sarif grype-source.sarif

      # -----------------------------
      # Trivy Docker
      - name: "Trivy scan (Docker: CRITICAL,HIGH)"
        if: ${{ github.event.inputs.target == 'docker' || github.event.inputs.target == 'both' }}
        id: trivy-docker
        uses: aquasecurity/trivy-action@0.16.0
        with:
          image-ref: "${{ steps.vars.outputs.image }}"
          format: "sarif"
          output: trivy-docker.sarif
          severity: "CRITICAL,HIGH"
          exit-code: "0"
        continue-on-error: true

      - name: Filter Trivy Docker SARIF
        if: ${{ (github.event.inputs.target == 'docker' || github.event.inputs.target == 'both') && github.event.inputs.filter_strict }}
        run: |
          jq '.runs[].results |= map(select(.level=="error" or .level=="warning"))' trivy-docker.sarif > trivy-docker.filtered.sarif
          mv trivy-docker.filtered.sarif trivy-docker.sarif

      # -----------------------------
      # Trivy Source
      - name: "Trivy scan (Source: CRITICAL,HIGH)"
        if: ${{ github.event.inputs.target == 'source' || github.event.inputs.target == 'both' }}
        id: trivy-source
        uses: aquasecurity/trivy-action@0.16.0
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: trivy-source.sarif
          severity: "CRITICAL,HIGH"
          exit-code: "0"
        continue-on-error: true

      - name: Filter Trivy Source SARIF
        if: ${{ (github.event.inputs.target == 'source' || github.event.inputs.target == 'both') && github.event.inputs.filter_strict }}
        run: |
          jq '.runs[].results |= map(select(.level=="error" or .level=="warning"))' trivy-source.sarif > trivy-source.filtered.sarif
          mv trivy-source.filtered.sarif trivy-source.sarif

      - name: Upload SARIFs (all) files
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "."

      # -----------------------------
      # Collect all reports
      - name: Upload all scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-reports-${{ github.event.inputs.target }}
          path: "**/*.sarif"
          if-no-files-found: ignore

      # Final fail check
      - name: Fail if vulnerabilities were found
        if: always()
        run: |
          echo "Checking scan results..."
          FAILED=false
          if [[ "${{ steps.grype-docker.outcome }}" == "failure" ]]; then FAILED=true; fi
          if [[ "${{ steps.grype-source.outcome }}" == "failure" ]]; then FAILED=true; fi
          if [[ "${{ steps.trivy-docker.outcome }}" == "failure" ]]; then FAILED=true; fi
          if [[ "${{ steps.trivy-source.outcome }}" == "failure" ]]; then FAILED=true; fi

          if [ "$FAILED" = "true" ]; then
            echo "❌ Vulnerabilities found!"
            exit 1
          else
            echo "✅ No blocking vulnerabilities found."
          fi
